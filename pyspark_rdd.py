# -*- coding: utf-8 -*-
"""PySpark RDD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1unZS4EmVYtlTsAQI81-3hr5Rv7hnvYZZ
"""

!pip install pyspark==3.0.1

import pyspark
from pyspark .sql import SparkSession
spark = SparkSession.builder.getOrCreate()

cust = spark.sparkContext.textFile("/content/drive/MyDrive/Big Data/cust.csv")

trans240 = spark.sparkContext.textFile("/content/drive/MyDrive/Big Data/trans240.csv")

cust.collect()

trans240.collect()

def custom_month_sort_key(month):
    month_order = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    return month_order.index(month)

#1. For each month, show the number of transactions, the results are sorted by game
task1_1 = trans240.map(lambda x: x.split(",")).map(lambda x: (x[1][:3], x[2])).distinct().map(lambda x: (x[0], 1)).reduceByKey(lambda x, y: x + y)
task1_2 = trans240.map(lambda x: x.split(",")).map(lambda x: (x[1][:3], float(x[3]))).reduceByKey(lambda x, y: (x + y)).sortByKey()
task1 = task1_1.join(task1_2).sortBy(lambda x: custom_month_sort_key(x[0]))

for month, (transaction_count, total_cost) in task1.collect():
    print(f"{month}, {transaction_count}, {total_cost}")

#2 For each month, show the name three youngest player, the results are sorted by the month
transRDD = trans240.map(lambda line: line.split(",")).map(lambda x: (x[2], x[1].split('-')[0])).distinct()
custRDD = cust.map(lambda line: line.split(",")).map(lambda x: (x[0], (x[1], x[3])))
combined = custRDD.join(transRDD)
trans_month_players_rdd = combined.map(lambda x: (x[1][1], (x[1][0][0], int(x[1][0][1])))).groupByKey()

result_rdd = trans_month_players_rdd.flatMap(
    lambda group: [(group[0], player) for player in sorted(group[1], key=lambda x: x[1])[:3]]
)

result_rdd = result_rdd.reduceByKey(lambda x1, x2: x1 + x2).sortBy(lambda x: custom_month_sort_key(x[0]))
result_rdd.collect()

#3. For each state, show the number of distinct players of each state, the results are sorted by the number of players
trans_rdd = trans240.map(lambda line: line.split(",")).map(lambda x: (x[7], x[2])).distinct().map(lambda x: (x[0], 1)).reduceByKey(lambda x, y: x + y).sortBy(lambda x: x[1])
trans_rdd.collect()

#4. For each state, show the name of three oldest player in each state, the results are sorted by the state
cust_rdd = cust.map(lambda line: line.split(",")).map(lambda x: (x[0], (x[1], x[3]))).distinct()

trans_rdd = trans240.map(lambda line: line.split(",")).map(lambda x: (x[2], x[7])).distinct()

joined_data = cust_rdd.join(trans_rdd).distinct()

#(city, (name,age))
joined_data = joined_data.map(lambda x: (x[1][1], x[1][0])).distinct().sortByKey()

##(city, (name,age) + (name,age))
joined_data = joined_data.map(lambda x: (x[0], [(x[1][0], int(x[1][1]))])).reduceByKey(lambda x, y: x + y)


joined_data = joined_data.map(lambda x: (x[0], sorted(x[1], key=lambda y: -y[1])[:3])).sortByKey()

joined_data.collect()

#5.For each state, show the average age of players in each state, the results are sorted by the average age

cust_age_rdd = cust.map(lambda line: line.split(",")).map(lambda x: (x[0], float(x[3])))

trans_state_rdd = trans240.map(lambda line: line.split(",")).map(lambda x: (x[2], x[7]))

task5 = cust_age_rdd.join(trans_state_rdd)
#(stae / age)
task5 = task5.map(lambda x: (x[1][1], x[1][0])).groupByKey().mapValues(list)
#(stae / average(age))
task5 = task5.map(lambda x: (x[0], sum(x[1]) / len(x[1]))).sortBy(lambda x: x[1])

for state, avg_age in task5.collect():
    print(f"{state}, {avg_age}")

#6. For each player ID, show the average number of game per month, the results are sorted by player ID
task6 = trans240.map(lambda line: line.split(",")).map(lambda x: (x[2], x[1][:3], x[4]))

# Map each transaction to a (player_id, month) tuple and count each occurrence
task6 = task6.map(lambda x: ((x[0], x[1]), 1)).reduceByKey(lambda x, y: x + y).groupByKey()

# Calculate the average game count per month for each player
task6 = task6.map(lambda x: (x[0], sum(x[1]) / len(x[1]))).sortBy(lambda x: x[0]).map(lambda x: (x[0][0], [(x[0][1], x[1])])).reduceByKey(lambda x, y: x + y)

task6.collect()

#7. For each player ID, show the game with highest total cost, and the total cost of this game, the results are sorted by player ID
task7 = trans240.map(lambda x: x.split(",")).map(lambda x: (x[2], x[4], x[1], float(x[3]))).groupBy(lambda x: x[0])

result = task7.mapValues(lambda data: max(data, key=lambda x: x[3])).sortByKey()

for player_id, game_data in result.collect():
    print(f"{player_id}, {game_data[1]}, {game_data[3]}")

#8. For each player ID, show the month with highest total cost, and the total cost in this month
task8 = trans240.map(lambda x: x.split(",")).map(lambda x: (x[2], x[4], x[1][:3], float(x[3]))).groupBy(lambda x: x[0])

def calculate_monthly_total_cost(data):
    monthly_costs = {}
    for item in data:
        player_id, game_name, month, cost = item
        if (player_id, month) in monthly_costs:
            monthly_costs[(player_id, month)] += cost
        else:
            monthly_costs[(player_id, month)] = cost
    return monthly_costs

# Calculate monthly total costs for each player
result = task8.mapValues(calculate_monthly_total_cost).sortByKey()

for player_id, monthly_costs in result.collect():
    max_month, max_cost = max(monthly_costs.items(), key=lambda x: x[1])
    print(f"{player_id}, {max_month[1]}, {max_cost}")

#9. For each player ID, show the list of three games with most transactions, and the list of the number of transactions of these three games, the results are sorted by player IDs
task9 = trans240.map(lambda x: x.split(",")).map(lambda x: (x[2], x[4])).groupBy(lambda x: x[0])

def find_top_three_games(data):
    game_counts = {}
    for item in data:
        player_id, game_name = item
        if game_name in game_counts:
            game_counts[game_name] += 1
        else:
            game_counts[game_name] = 1
    top_three_games = sorted(game_counts.items(), key=lambda x: x[1], reverse=True)[:3]
    return top_three_games

result = task9.mapValues(find_top_three_games).sortByKey()

for player_id, top_three_games in result.collect():
    print(f"{player_id}")
    for game_name in top_three_games:
        print(f"{game_name}")

#10. For each game, show the number of transactions, the results are sorted by game
task10 = trans240.map(lambda x: x.split(",")).map(lambda x: (x[4],1)). reduceByKey(lambda amount1, amount2 : float (amount1)+float (amount2)).sortByKey()
for (game, transaction_count) in task10.collect():
    print(f"{game}, {transaction_count}")

#11. For each game, show the number of transactions, and the total cost, the results are sorted by game
task11 = trans240.map(lambda x: x.split(",")).map(lambda x: (x[4], (1, float(x[3])))).reduceByKey(lambda x, y: (x[0] + y[0], x[1] + y[1])).sortByKey()
for game, (transaction_count, total_cost) in task11.collect():
    print(f"{game}, {transaction_count}, {total_cost}")

#12. For each month, show the number of transactions, and the total cost, the results are sorted by month
task12 = trans240.map(lambda x: x.split(",")).map(lambda x: (x[1][:3], (1, float(x[3])))).reduceByKey(lambda x, y: (x[0] + y[0], x[1] + y[1])).sortBy(lambda x: custom_month_sort_key(x[0]))

for month, (transaction_count, total_cost) in task12.collect():
    print(f"{month}, {transaction_count}, {total_cost}")